{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pycitylayers Auto-generated documentation index. This is a Python API to interact with Concordia CERC's open data and other available open portals. Full Pycitylayers project documentation can be found in Modules pycitylayers Install linux Windows Usage Pycitylayers Modules It uses GraphQL and PostGIS for geometrical queries. Install linux install virtualenv if not already done sudo pip install --upgrade virtualenv create a virtual env virtualenv -p python3 pycitylayers clone and install the package git clone https://github.com/miladaghamohamadnia/pycitylayers.git cd pycitylayers pip install . Windows Install pip Usually Python3 comes with pip preinstalled. If you get an error \"pip command not found\", use the following command to install pip: Launch a command prompt if it isn't already open. To do so, open the Windows search bar, type cmd and click on the icon. Then, run the following command to download the get-pip.py file: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py To install PIP type in the following: python get-pip.py Now pip should work system wide. install virtualenv pip install --upgrade virtualenv create a virtual env virtualenv -p python3 pycitylayers clone and install the package git clone https://github.com/miladaghamohamadnia/pycitylayers.git cd pycitylayers pip install . Usage get all data tables available from pycitylayers.client import Client from pycitylayers.utils import PointGQL, PolygonGQL from pprint import pprint client = Client().create(source='cerc') tables = client.get_all_tables() pprint(tables) get 5 rows from a table from pycitylayers.client import Client from pycitylayers.utils import PointGQL, PolygonGQL from pprint import pprint client = Client().create(source='cerc') query_options = { 'table': 'agents', 'columns': ['id', 'vlon', 'vlat'], 'nrows': 5, 'skiprows': 3, } data = client.get_rows( **query_options ) pprint(data)","title":"pycitylayers"},{"location":"#pycitylayers","text":"Auto-generated documentation index. This is a Python API to interact with Concordia CERC's open data and other available open portals. Full Pycitylayers project documentation can be found in Modules pycitylayers Install linux Windows Usage Pycitylayers Modules It uses GraphQL and PostGIS for geometrical queries.","title":"pycitylayers"},{"location":"#install","text":"","title":"Install"},{"location":"#linux","text":"install virtualenv if not already done sudo pip install --upgrade virtualenv create a virtual env virtualenv -p python3 pycitylayers clone and install the package git clone https://github.com/miladaghamohamadnia/pycitylayers.git cd pycitylayers pip install .","title":"linux"},{"location":"#windows","text":"Install pip Usually Python3 comes with pip preinstalled. If you get an error \"pip command not found\", use the following command to install pip: Launch a command prompt if it isn't already open. To do so, open the Windows search bar, type cmd and click on the icon. Then, run the following command to download the get-pip.py file: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py To install PIP type in the following: python get-pip.py Now pip should work system wide. install virtualenv pip install --upgrade virtualenv create a virtual env virtualenv -p python3 pycitylayers clone and install the package git clone https://github.com/miladaghamohamadnia/pycitylayers.git cd pycitylayers pip install .","title":"Windows"},{"location":"#usage","text":"get all data tables available from pycitylayers.client import Client from pycitylayers.utils import PointGQL, PolygonGQL from pprint import pprint client = Client().create(source='cerc') tables = client.get_all_tables() pprint(tables) get 5 rows from a table from pycitylayers.client import Client from pycitylayers.utils import PointGQL, PolygonGQL from pprint import pprint client = Client().create(source='cerc') query_options = { 'table': 'agents', 'columns': ['id', 'vlon', 'vlat'], 'nrows': 5, 'skiprows': 3, } data = client.get_rows( **query_options ) pprint(data)","title":"Usage"},{"location":"MODULES/","text":"Pycitylayers Modules Auto-generated documentation modules index. Full list of Pycitylayers project modules. pycitylayers Pycitylayers Client Client Query Query Utils Constants Geometry Query Factory Response Utils","title":"Pycitylayers Modules"},{"location":"MODULES/#pycitylayers-modules","text":"Auto-generated documentation modules index. Full list of Pycitylayers project modules. pycitylayers Pycitylayers Client Client Query Query Utils Constants Geometry Query Factory Response Utils","title":"Pycitylayers Modules"},{"location":"pycitylayers/","text":"Pycitylayers Auto-generated documentation for pycitylayers module. Pycitylayers / Modules / Pycitylayers Modules Client Query Utils","title":"Pycitylayers"},{"location":"pycitylayers/#pycitylayers","text":"Auto-generated documentation for pycitylayers module. Pycitylayers / Modules / Pycitylayers Modules Client Query Utils","title":"Pycitylayers"},{"location":"pycitylayers/client/","text":"Client Auto-generated documentation for pycitylayers.client module. Pycitylayers / Modules / Pycitylayers / Client Modules Client","title":"Client"},{"location":"pycitylayers/client/#client","text":"Auto-generated documentation for pycitylayers.client module. Pycitylayers / Modules / Pycitylayers / Client Modules Client","title":"Client"},{"location":"pycitylayers/client/client/","text":"Client Auto-generated documentation for pycitylayers.client.client module. Client class facilitating querying of DB Pycitylayers / Modules / Pycitylayers / Client / Client Client Client.create Client [find in source code] class Client(): def __init__(): Client.create [find in source code] @staticmethod def create(*args, **kwargs): Factory method instantiating appropriate query class all valuse passed to this function is passed down to corresponding class initialization Arguments source - source DB name based on their categories :type source: string Returns Query class, class for querying DB Type: class","title":"Client"},{"location":"pycitylayers/client/client/#client","text":"Auto-generated documentation for pycitylayers.client.client module. Client class facilitating querying of DB Pycitylayers / Modules / Pycitylayers / Client / Client Client Client.create","title":"Client"},{"location":"pycitylayers/client/client/#client_1","text":"[find in source code] class Client(): def __init__():","title":"Client"},{"location":"pycitylayers/client/client/#clientcreate","text":"[find in source code] @staticmethod def create(*args, **kwargs): Factory method instantiating appropriate query class all valuse passed to this function is passed down to corresponding class initialization","title":"Client.create"},{"location":"pycitylayers/client/client/#arguments","text":"source - source DB name based on their categories :type source: string","title":"Arguments"},{"location":"pycitylayers/client/client/#returns","text":"Query class, class for querying DB Type: class","title":"Returns"},{"location":"pycitylayers/query/","text":"Query Auto-generated documentation for pycitylayers.query module. Pycitylayers / Modules / Pycitylayers / Query Modules Query","title":"Query"},{"location":"pycitylayers/query/#query","text":"Auto-generated documentation for pycitylayers.query module. Pycitylayers / Modules / Pycitylayers / Query Modules Query","title":"Query"},{"location":"pycitylayers/query/query/","text":"Query Auto-generated documentation for pycitylayers.query.query module. Query classes for querying of DB Pycitylayers / Modules / Pycitylayers / Query / Query Query Query().url Query().url QueryCKAN QueryGQL QueryGQL().get_all_tables QueryGQL().get_columns QueryGQL().get_rows Query [find in source code] class Query(): def __init__(*args, **kwargs): Base Query class Query().url [find in source code] @property def url(): property method to get current url of DB api Returns url string Type: string Query().url [find in source code] @url.setter def url(url): method to set current url of DB api Arguments url - url of DB api :type url: string QueryCKAN [find in source code] class QueryCKAN(Query): def __init__(*args, **kwargs): CKAN Querying class See also Query QueryGQL [find in source code] class QueryGQL(Query): def __init__(*args, **kwargs): GraphQL Querying class See also Query QueryGQL().get_all_tables [find in source code] def get_all_tables(): QueryGQL().get_columns [find in source code] def get_columns(table=''): QueryGQL().get_rows [find in source code] def get_rows(**kwargs):","title":"Query"},{"location":"pycitylayers/query/query/#query","text":"Auto-generated documentation for pycitylayers.query.query module. Query classes for querying of DB Pycitylayers / Modules / Pycitylayers / Query / Query Query Query().url Query().url QueryCKAN QueryGQL QueryGQL().get_all_tables QueryGQL().get_columns QueryGQL().get_rows","title":"Query"},{"location":"pycitylayers/query/query/#query_1","text":"[find in source code] class Query(): def __init__(*args, **kwargs): Base Query class","title":"Query"},{"location":"pycitylayers/query/query/#queryurl","text":"[find in source code] @property def url(): property method to get current url of DB api","title":"Query().url"},{"location":"pycitylayers/query/query/#returns","text":"url string Type: string","title":"Returns"},{"location":"pycitylayers/query/query/#queryurl_1","text":"[find in source code] @url.setter def url(url): method to set current url of DB api","title":"Query().url"},{"location":"pycitylayers/query/query/#arguments","text":"url - url of DB api :type url: string","title":"Arguments"},{"location":"pycitylayers/query/query/#queryckan","text":"[find in source code] class QueryCKAN(Query): def __init__(*args, **kwargs): CKAN Querying class","title":"QueryCKAN"},{"location":"pycitylayers/query/query/#see-also","text":"Query","title":"See also"},{"location":"pycitylayers/query/query/#querygql","text":"[find in source code] class QueryGQL(Query): def __init__(*args, **kwargs): GraphQL Querying class","title":"QueryGQL"},{"location":"pycitylayers/query/query/#see-also_1","text":"Query","title":"See also"},{"location":"pycitylayers/query/query/#querygqlget_all_tables","text":"[find in source code] def get_all_tables():","title":"QueryGQL().get_all_tables"},{"location":"pycitylayers/query/query/#querygqlget_columns","text":"[find in source code] def get_columns(table=''):","title":"QueryGQL().get_columns"},{"location":"pycitylayers/query/query/#querygqlget_rows","text":"[find in source code] def get_rows(**kwargs):","title":"QueryGQL().get_rows"},{"location":"pycitylayers/utils/","text":"Utils Auto-generated documentation for pycitylayers.utils module. Pycitylayers / Modules / Pycitylayers / Utils Modules Constants Geometry Query Factory Response Utils","title":"Utils"},{"location":"pycitylayers/utils/#utils","text":"Auto-generated documentation for pycitylayers.utils module. Pycitylayers / Modules / Pycitylayers / Utils Modules Constants Geometry Query Factory Response Utils","title":"Utils"},{"location":"pycitylayers/utils/constants/","text":"Constants Auto-generated documentation for pycitylayers.utils.constants module. Pycitylayers / Modules / Pycitylayers / Utils / Constants","title":"Constants"},{"location":"pycitylayers/utils/constants/#constants","text":"Auto-generated documentation for pycitylayers.utils.constants module. Pycitylayers / Modules / Pycitylayers / Utils / Constants","title":"Constants"},{"location":"pycitylayers/utils/geometry/","text":"Geometry Auto-generated documentation for pycitylayers.utils.geometry module. Pycitylayers / Modules / Pycitylayers / Utils / Geometry GeometryGQL GeometryGQL().format_geom PointGQL PointGQL().point PolygonGQL PolygonGQL().poly_from_points PolygonGQL().rect_from_two_corners GeometryGQL [find in source code] class GeometryGQL(): def __init__(): GeometryGQL().format_geom [find in source code] def format_geom(coords, epsg=4326, geom_type='Polygon'): PointGQL [find in source code] class PointGQL(GeometryGQL): def __init__(): See also GeometryGQL PointGQL().point [find in source code] def point(x, y): PolygonGQL [find in source code] class PolygonGQL(GeometryGQL): def __init__(): See also GeometryGQL PolygonGQL().poly_from_points [find in source code] def poly_from_points(points): PolygonGQL().rect_from_two_corners [find in source code] def rect_from_two_corners(p1, p2):","title":"Geometry"},{"location":"pycitylayers/utils/geometry/#geometry","text":"Auto-generated documentation for pycitylayers.utils.geometry module. Pycitylayers / Modules / Pycitylayers / Utils / Geometry GeometryGQL GeometryGQL().format_geom PointGQL PointGQL().point PolygonGQL PolygonGQL().poly_from_points PolygonGQL().rect_from_two_corners","title":"Geometry"},{"location":"pycitylayers/utils/geometry/#geometrygql","text":"[find in source code] class GeometryGQL(): def __init__():","title":"GeometryGQL"},{"location":"pycitylayers/utils/geometry/#geometrygqlformat_geom","text":"[find in source code] def format_geom(coords, epsg=4326, geom_type='Polygon'):","title":"GeometryGQL().format_geom"},{"location":"pycitylayers/utils/geometry/#pointgql","text":"[find in source code] class PointGQL(GeometryGQL): def __init__():","title":"PointGQL"},{"location":"pycitylayers/utils/geometry/#see-also","text":"GeometryGQL","title":"See also"},{"location":"pycitylayers/utils/geometry/#pointgqlpoint","text":"[find in source code] def point(x, y):","title":"PointGQL().point"},{"location":"pycitylayers/utils/geometry/#polygongql","text":"[find in source code] class PolygonGQL(GeometryGQL): def __init__():","title":"PolygonGQL"},{"location":"pycitylayers/utils/geometry/#see-also_1","text":"GeometryGQL","title":"See also"},{"location":"pycitylayers/utils/geometry/#polygongqlpoly_from_points","text":"[find in source code] def poly_from_points(points):","title":"PolygonGQL().poly_from_points"},{"location":"pycitylayers/utils/geometry/#polygongqlrect_from_two_corners","text":"[find in source code] def rect_from_two_corners(p1, p2):","title":"PolygonGQL().rect_from_two_corners"},{"location":"pycitylayers/utils/query_factory/","text":"Query Factory Auto-generated documentation for pycitylayers.utils.query_factory module. Pycitylayers / Modules / Pycitylayers / Utils / Query Factory query_gql_all_columns query_gql_all_tables query_gql_rows query_gql_all_columns [find in source code] def query_gql_all_columns(table_name): query_gql_all_tables [find in source code] def query_gql_all_tables(): query_gql_rows [find in source code] def query_gql_rows( table='', columns=[], nrows=5, skiprows=0, geometry=None, geometry_operation='is_within_poly', **kwargs, ):","title":"Query Factory"},{"location":"pycitylayers/utils/query_factory/#query-factory","text":"Auto-generated documentation for pycitylayers.utils.query_factory module. Pycitylayers / Modules / Pycitylayers / Utils / Query Factory query_gql_all_columns query_gql_all_tables query_gql_rows","title":"Query Factory"},{"location":"pycitylayers/utils/query_factory/#query_gql_all_columns","text":"[find in source code] def query_gql_all_columns(table_name):","title":"query_gql_all_columns"},{"location":"pycitylayers/utils/query_factory/#query_gql_all_tables","text":"[find in source code] def query_gql_all_tables():","title":"query_gql_all_tables"},{"location":"pycitylayers/utils/query_factory/#query_gql_rows","text":"[find in source code] def query_gql_rows( table='', columns=[], nrows=5, skiprows=0, geometry=None, geometry_operation='is_within_poly', **kwargs, ):","title":"query_gql_rows"},{"location":"pycitylayers/utils/response/","text":"Response Auto-generated documentation for pycitylayers.utils.response module. Pycitylayers / Modules / Pycitylayers / Utils / Response Response Response().from_requests Response().to_json Response [find in source code] class Response(): def __init__(): Response().from_requests [find in source code] def from_requests(res): Response().to_json [find in source code] def to_json():","title":"Response"},{"location":"pycitylayers/utils/response/#response","text":"Auto-generated documentation for pycitylayers.utils.response module. Pycitylayers / Modules / Pycitylayers / Utils / Response Response Response().from_requests Response().to_json","title":"Response"},{"location":"pycitylayers/utils/response/#response_1","text":"[find in source code] class Response(): def __init__():","title":"Response"},{"location":"pycitylayers/utils/response/#responsefrom_requests","text":"[find in source code] def from_requests(res):","title":"Response().from_requests"},{"location":"pycitylayers/utils/response/#responseto_json","text":"[find in source code] def to_json():","title":"Response().to_json"},{"location":"pycitylayers/utils/utils/","text":"Utils Auto-generated documentation for pycitylayers.utils.utils module. Pycitylayers / Modules / Pycitylayers / Utils / Utils get_project_root get_project_root [find in source code] def get_project_root() -> Path:","title":"Utils"},{"location":"pycitylayers/utils/utils/#utils","text":"Auto-generated documentation for pycitylayers.utils.utils module. Pycitylayers / Modules / Pycitylayers / Utils / Utils get_project_root","title":"Utils"},{"location":"pycitylayers/utils/utils/#get_project_root","text":"[find in source code] def get_project_root() -> Path:","title":"get_project_root"}]}